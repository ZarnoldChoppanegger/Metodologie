<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">

<head>
<title>Pointers_Arrays_and_ References.html</title>

</head>

<body>

<h2>void*</h2>

<ul>
<li><p>un puntatore (void*) è interpretato come puntatore a un oggetto di tipo sconosciuto</p></li>
<li><p>un puntatore a un qualsiasi tipo può essere associato a un puntatore void*,  tranne i puntatori a funzioni e a membri. In oltre void* può essere assegnato a un altro void*, può essere comparato per equità o inequità e può essere convertito esplicitamente in un altro tipo.
Altri tipi di operazioni sarebbero insicure in quanto il compilatorenon  conosce il tipo di dato puntato</p></li>
</ul>

<p>es.
```c++
void foo(int* pi)
{
    void* pv = pi;
    *pv;   //errore non si può dereferenziare
    ++pv;     //errore non si può incrementare il puntatore senza conoscere il tipo</p>

<pre><code>int* pi2 = static_cast&lt;int*&gt;(pv);
double* pd1 = pv;
double* pd2 = pi;
double* pd3 = static_cast&lt;double*&gt;(pv);   //possibile ma non sicuro poichè è implementation defined
</code></pre>

<p>}
```</p>

<h2>nullptr</h2>

<ul>
<li><p>la parola chiave <strong>nullptr</strong> rappresenta un puntatore che non punta a nessun oggetto</p></li>
<li><p><strong>nullptr</strong> può essere associato a qualsiasi tipo di puntatore</p></li>
<li><p>era uso comune usare 0 per indicare il puntatore nullo poichè non essite alcun oggetto allocato con l'indirizzo 0</p></li>
<li><p>è stato uso comune usare la macro NULL per denotare un puntatore nullo, ma NULL differisce nelle varie implementazioni e può rappresentare 0 o 0L, in C (void*)0 che non è legale in C++</p></li>
<li><p>nullptr rende il <strong>codice più leggibile</strong> e <strong>evita confusioni</strong> quando una funzione sovvraccaricata accetta come parametri sia un puntatore che un intero</p></li>
</ul>

<h2>array</h2>

<ul>
<li>lo standard C++ 99 non accetta array creati dinamicamente</li>
</ul>

<h2>pointers and const</h2>

<ul>
<li><p>Usando i puntatori due oggetti vengono  coinvolti: il puntatore e l'oggetto puntato.</p>

<ul>
<li><strong>prefissando</strong> <em>const</em> alla dichiarazione del puntatore fa si che l'oggetto puntato, e non il puntatore, sia costante. (es. 
<code>C++
char s[] = "Gorm";
const char* pc = s;
</code>
)</li>
<li>per creare un puntatore costante a un oggetto è necessario usare <strong>*const</strong> 
(es. </li>
</ul>

<p><p><code>C++
char *const pc;
</code>
)</p></li>
<li><p>Una costante indica solo una promessa di non voler modificare il valore, ma se questa viene acceduta in altri modi è possibile modificare il valore della costante</p></li>
</ul></p>

</body>
</html>
